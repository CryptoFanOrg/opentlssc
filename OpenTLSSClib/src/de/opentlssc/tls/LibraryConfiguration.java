// Copyright 2013 Martin Boonk
//
// This file is part of the OpenTLSSClib.
//
// The OpenTLSSClib is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The OpenTLSSClib is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with the OpenTLSSClib.  If not, see <http://www.gnu.org/licenses/>.

package de.opentlssc.tls;

/**
 * The data in this class controls the installation process of the applet and
 * some other parameters.
 * 
 * @author Martin Boonk
 *
 */
class LibraryConfiguration {
	/**
	 * Controls the maximum possible number of iterations and is proportional
	 * to the possible bytes that can be generated by the tls prf:
	 * possibleBytes = maxIterations * usedHashLength
	 */
	static short			CONFIG_PRF_MAX_ITERATIONS				= 4;
	static short			CONFIG_PRF_MAX_COMBINED_SEED_LENGTH		= 64;
	static final byte	CONFIG_APDU_PADDING_LENGTH				= 62;
	static final short	CONFIG_LENGTH_SERVER_CERTIFICATE		= 1024;
	
	/**
	 * CONFIG_WORKSPACES and CONFIG_BIG_WORKSPACES denote the number of total workspaces
	 * CONFIG_TRANSIENT_WORKSPACES and CONFIG_TRANSIENT_BIG_WORKSPACES denote how many of the total workspaces should be transient
	 * 
	 * CONFIG_WORKSPACES * CONFIG_TRANSIENT_WORKSPACE_LENGTH = allocated transient bytes
	 * 
	 * Size limitations for the smaller workspaces:
	 * >= longest enabled hmac digest length
	 * >= TLS PRF used digest length
	 * >= size of record mac metadata (TLS 1.2 13 bytes)
	 * >= 2* biggest used cipher blocksize
	 * >= 2* random bytes length (TLS 1.2 2*32 bytes)
	 * <= apdu buffer - biggest enabled cipher blocksize
	 * 
	 * Size limitations for the bigger workspaces:
	 * even multiple of the used payload blocksizes
	 */
	static final short	CONFIG_TRANSIENT_WORKSPACE_LENGTH		= 64;
	static final short	CONFIG_TRANSIENT_BIG_WORKSPACE_LENGTH	= 256;
	static final short	CONFIG_WORKSPACES						= 6;
	static final short	CONFIG_BIG_WORKSPACES					= 2;
	static final short	CONFIG_TRANSIENT_WORKSPACES				= 6;
	static final short	CONFIG_TRANSIENT_BIG_WORKSPACES			= 2;
	static boolean		CONFIG_STORE_CONNECTION_STATES_IN_RAM	= true;
	static final short	CONFIG_KEYBLOCK_MAX_SIZE				= 128;
	static final short	CONFIG_PERSO_DATA_SIZE					= 2048;
	static final byte	CONFIG_PERSO_PIN_MAX_TRIES				= 3;
//	static final byte[]	CONFIG_PERSO_PIN_VALUE					= new byte [] {0,0,0,0};
	static final byte	CONFIG_USER_PIN_MAX_TRIES				= 3;
//	static final byte[]	CONFIG_USER_PIN_VALUE					= new byte [] {0,0,0,0};
	// cipher suite configurations
	static boolean		CONFIG_NULL_CIPHER						= true;
	static boolean		CONFIG_AES_128							= true;
	static boolean		CONFIG_AES_256							= true;
	static boolean		CONFIG_3DES								= false;
	static boolean		CONFIG_MD5								= false;
	static boolean		CONFIG_SHA								= true;
	static boolean		CONFIG_SHA_256							= false;

	
	static boolean		emu										= false;
}
